package org.netbeans.asciidoc;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebView;
import org.apache.commons.io.FileUtils;
import org.asciidoctor.*;
import org.jtrim.concurrent.*;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.queries.FileEncodingQuery;
import org.netbeans.asciidoc.converters.ADocToHTMLConverter;
import org.netbeans.asciidoc.util.HTMLUtility;

import javax.swing.*;
import java.io.File;
import java.nio.charset.*;
import java.nio.file.Files;
import java.util.*;
import java.util.function.Supplier;
import java.util.logging.*;

@SuppressWarnings("serial")
public final class AdocVisualPanel extends JPanel {
  private static final Logger LOGGER = Logger.getLogger(AdocVisualPanel.class.getName());

  private final UpdateTaskExecutor adocUpdater;
  private final UpdateTaskExecutor htmlComponentUpdater;

  private final JFXPanel jfxPanel;

  private WebView webView;

  public AdocVisualPanel() {
    this(AdocExecutors.DEFAULT_EXECUTOR);
  }

  public AdocVisualPanel(TaskExecutor executor) {
    adocUpdater = new GenericUpdateTaskExecutor(executor);
    htmlComponentUpdater = new GenericUpdateTaskExecutor(Platform::runLater);
    webView = null;

    initComponents();

    Platform.setImplicitExit(false);
    jfxPanel = new JFXPanel();
    add(jfxPanel);
  }

  public void updateWithAsciidoc(Supplier<File> asciidocProvider) {
    Objects.requireNonNull(asciidocProvider, "asciidocProvider");

    adocUpdater.execute(() -> {
      ProgressHandle handle = ProgressHandle.createHandle("Rendering Asciidoc ...");
      handle.start();
      try {
        File target = Files.createTempFile("adocout", ".html").toFile();
        new ADocToHTMLConverter().convert(asciidocProvider.get(), target, "adoc", "html", Map.of(
            "ATTRIBUTE_" + Attributes.SHOW_TITLE, true,
            "ATTRIBUTE_" + Attributes.SOURCE_HIGHLIGHTER, "coderay",
            "ATTRIBUTE_coderay-css", "style",
            Options.BACKEND, "html5",
            Options.SAFE, "unsafe",
            Options.HEADER_FOOTER, true
        ));

        // asciidoctor only supports utf-8 ( https://github.com/asciidoctor/asciidoctor/issues/3595 )
        String html = FileUtils.readFileToString(target, StandardCharsets.UTF_8);

        htmlComponentUpdater.execute(() -> updateHtmlNow(html));
      } catch (Throwable ex) {
        // TODO: Show the problem to the user.
        LOGGER.log(Level.INFO, "Failed to convert text to html.", ex);
      } finally {
        handle.finish();
      }
    });
  }

  private void updateHtmlNow(String html) {
    WebView currentWebView = webView;
    if (currentWebView == null) {
      currentWebView = new WebView();
      jfxPanel.setScene(new Scene(currentWebView));
      webView = currentWebView;
    }

    // special handling for iframe, because the webview is not able to load it correctly..
    html = HTMLUtility.removeTag(html, "iframe", "<span>[iframe element not previewable]<span>");

    currentWebView.getEngine().loadContent(html);
  }

  @Override
  public String getName() {
    return "AdocVisualElement";
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setLayout(new java.awt.GridLayout(1, 1));
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
